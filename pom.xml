<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.raonigabriel</groupId>
	<artifactId>graal-hello-resources</artifactId>
	<version>1.2.0</version>
	<packaging>jar</packaging>

	<name>graal-hello-resources</name>
	<description>A simple example to demonstrate how to embed resources using GraalVM</description>
	<url>https://github.com/raonigabriel/graal-hello-resources/README.md</url>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
		</license>
	</licenses>

	<scm>
		<url>https://github.com/raonigabriel/graal-hello-resources</url>
	</scm>

	<developers>
		<developer>
			<id>raonigabriel</id>
			<name>Raoni Gabriel</name>
			<timezone>-3</timezone>
			<url>https://github.com/raonigabriel</url>
			<roles>
				<role>Java Software Architect</role>
				<role>Cloud Solutions Architect</role>
				<role>DevOps Engineer</role>
			</roles>
		</developer>
	</developers>

	<properties>
    	<jdk.version>11</jdk.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<dependencies>
		<!-- We will use a small utility library -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.7</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>hello-resources</finalName>
		
		<pluginManagement>
			<plugins>
				<!--Plugin to help us go offline -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>			
				<!-- Plugin to compile Java -->
				<plugin>
				    <groupId>org.apache.maven.plugins</groupId>
				    <artifactId>maven-compiler-plugin</artifactId>
				    <version>3.8.1</version>
				    <configuration>
				        <release>${jdk.version}</release>
				    </configuration>
				</plugin>				
				<!-- Plugin to pack everything as a single executable JAR -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>3.2.4</version>
				</plugin>
				<!-- Plugin to run Proguard on our JAR -->
				<plugin>
					<groupId>com.github.wvengen</groupId>
					<artifactId>proguard-maven-plugin</artifactId>
					<version>2.3.1</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<outputFile>${project.build.directory}/${project.build.finalName}-fat.${project.packaging}</outputFile>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>com.github.raonigabriel.graal.HelloResources</mainClass>
								</transformer>
							</transformers>
							<filters>
							   <filter>
							      <artifact>*:*</artifact>
							      <excludes>
							         <exclude>META-INF/*.MF</exclude>
							      </excludes>
							   </filter>
							</filters>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<obfuscate>true</obfuscate>
					<outFilter>!META-INF/NOTICE.txt,!META-INF/LICENSE.txt</outFilter>
					<includeDependency>false</includeDependency>
					<injar>${project.build.finalName}-fat.jar</injar>
					<outjar>${project.build.finalName}.jar</outjar>
					<outputDirectory>${project.build.directory}</outputDirectory>
					<options>
						<option>-allowaccessmodification</option>
						<option>-mergeinterfacesaggressively</option>
						<option>-overloadaggressively</option>
						<option>-repackageclasses</option>
						<option>-optimizationpasses 5</option>
						<option>-keep public class
							com.github.raonigabriel.graal.HelloResources { public static void
							main(java.lang.String[]); }</option>
							<option>-printmapping target/proguard.map</option>
					</options>
					<libs>
						<lib>${java.home}/jmods</lib>
					</libs>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>